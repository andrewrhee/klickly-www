{
  "name": "connect-session-mongo",
  "version": "0.0.8",
  "description": "MongoDB Session Store for Connect Middleware",
  "author": {
    "name": "Bart Teeuwisse",
    "email": "bart@thecodemill.biz"
  },
  "contributors": [
    {
      "name": "Dav Glass",
      "email": "davglass@gmail.com"
    },
    {
      "name": "Tyler Johnson",
      "email": "tejohnso@rogers.com"
    },
    {
      "name": "Brandon Ramirez",
      "email": "brandon.s.ramirez@gmail.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/brandonramirez/connect-session-mongo/issues"
  },
  "os": [
    "darwin",
    "linux",
    "sunos"
  ],
  "engines": {
    "node": ">=0.2.0"
  },
  "directories": {
    "lib": "lib"
  },
  "main": "./lib/connect-session-mongo",
  "peerDependencies": {
    "connect": ">=2.0.0"
  },
  "dependencies": {
    "mongodb": ">=0.8.0"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "https://github.com/brandonramirez/connect-session-mongo/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/brandonramirez/connect-session-mongo.git"
  },
  "readme": "# MongoDB Session Storage for Connect Middleware\n\nThis module is an addon for [Connect Middleware](https://github.com/senchalabs/connect) that adds a new [Session Storage device](https://github.com/senchalabs/connect/blob/master/docs/session.md).\n\n\n## Install\n\n    npm install connect-session-mongo\n\n## Usage\n\nThe standard usage, is to just pass an instantiated `MongoStore` instance to the session plugin.\n\n    var connect = require('connect'),\n        MongoStore = require('connect-session-mongo');\n\n    var app = connect.createServer();\n\n    app.configure(function(){\n        app.use(connect.cookieDecoder());\n        app.use(connect.session({ store: new MongoStore() }));\n        app.use(app.router);\n    });\n\nYou can also pass several options to the constructor to tweak your session store:\n\n* db - The name of the db to use, defaults to: `connect-sessions`\n* ip - The IP address of the server to connect to, defaults to: `127.0.0.1`\n* port - The Port to connect to, defaults to: `27017`\n* collection - The collection to save its data to, defaults to: `sessions`\n* server - A custom mongo Server instance (this overides db, ip &amp; port)\n* url - A url to use for Db.connect style database connections (this overrides db, ip, port &amp; server)\n* timeout - Number of seconds before an idle session is removed (optional)\n\nAn optional callback function(err, connectedDb) can also be passed to the constructor after the options.\n\n<pre><code>var CustomServer = new Server(123.456.789.1, 12345, { auto_reconnect: true }, {});\napp.use(connect.session({ store: new MongoStore({ server: CustomServer }) }));</code></pre>\n\n<pre><code>app.use(connect.session({url: process.env.MONGO_URL}, function(err,db) {if (err) {throw err;}}));</code></pre>\n\n## License\n\nLicensed the [BSD license](https://github.com/bartt/connect-session-mongo/blob/master/LICENSE).\n\n### Based on these classes\n\n* [Sencha Connect Memory Store](https://github.com/senchalabs/connect/tree/master/lib/connect/middleware/session/memory.js)\n* [ciaranj's express-session-mongodb](https://github.com/ciaranj/express-session-mongodb)\n* [davglass's express-session-mongodb](https://github.com/davglass/express-session-mongodb)\n",
  "readmeFilename": "README.md",
  "_id": "connect-session-mongo@0.0.8",
  "dist": {
    "shasum": "4076ef9b93d34cfc1d15789e5967b54a9197524d"
  },
  "_from": "connect-session-mongo@0.0.8",
  "_resolved": "https://registry.npmjs.org/connect-session-mongo/-/connect-session-mongo-0.0.8.tgz"
}
